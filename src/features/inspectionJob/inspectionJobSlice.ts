import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { IMachine } from '../machine/machineSlice';
import { IPart } from '../part/partSlice';
import { IPartPackaging } from '../partPackaging/partPackagingSlice';
import { dummyAction } from './inspectionJobAPI';

export interface IInspectionJob {
    demoJob: boolean;
    // packagingDate?: Date;
    // part?: IPart;
    // packaging?: IPartPackaging;
    // packingOperator?: string;
    // pieceWeightQuantity?: number;
    // pieceWeight?: number;
    // pieceWeightValid?: boolean;
    // pieceWeightDiscrepancyNote?: string
}

export interface IInspectionJobState {
    value: IInspectionJob;
    status: 'idle' | 'loading' | 'failed';
}

const initialState: IInspectionJobState = {
    value: { demoJob: false },
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const dummyAsync = createAsyncThunk(
    'inspectionJob/dummy',
    async (dummyParm: { val1: any }) => {
        // Action defined in inspectionJob API
        const response = await dummyAction(dummyParm.val1);

        return response.data;
    },
);

// A function that accepts an initial state, an object full of reducer functions,
// and a "slice name", and automatically generates action creators and action types
// that correspond to the reducers and state.
export const inspectionJobSlice = createSlice({
    name: 'packagingJob',
    initialState,
    reducers: {
        newJob: (state) => {
            state = initialState;
        },
        //todo: error checking
        //can't edit job with inventory
        //can't delete box after combine
        //todo: notification on async tasks
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(dummyAsync.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(dummyAsync.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

export const {} = inspectionJobSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectInspectionJob = (state: RootState): IInspectionJob =>
    state.inspectionJob.value;
// export const selectIdentity = (state: RootState) => state.identity;

export default inspectionJobSlice.reducer;
