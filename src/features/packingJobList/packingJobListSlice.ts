import {
    createAction,
    createAsyncThunk,
    createSlice,
    PayloadAction,
} from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { IMachine, IMachineListState } from '../machine/machineSlice';
import { IPart, IPartListState } from '../part/partSlice';
import { IPartPackaging } from '../partPackaging/partPackagingSlice';
import { ILocalApiState } from '../localApi/localApiSlice';
import { retrievePackingJobs } from './packingJobListAPI';
import { IApplicationErrorState } from '../applicationError/applicationErrorSlice';
import { IIdentityState } from '../identity/identitySlice';

export interface IPackingPart {
    partCode: string;
    partDescription: string;
    unitWeight: number;
    weightTolerance: number;
    defaultPackagingCode: string;
    requiredFinalInspection: boolean;
    deflashMethod: string;
}

export interface IPackingPartPackaging {
    partCode: string;
    packageCode: string;
    packageDescription: string;
    standardPack: number;
    specialInstructions: string;
}

export interface IPackingCombinedObject {
    serial: number;
    quantityOriginal: number;
    quantityUsed: number;
    quantityRemaining: number;
}

export interface IPackingObject {
    packingJobNumber: string;
    serial: number;
    inspectionStatus: string;
    quantityCompleted: number;
    quantityAfterCombine: number;
    printed: boolean;
    rowID: number;
    combines: IPackingCombinedObject[];
}

export interface IPackingJob {
    packingJobNumber: string;
    packingOperator: string;
    specialInstructions: string;
    pieceWeightQuantity: number;
    pieceWeight: number;
    pieceWeightTolerance: number;
    pieceWeightValid: boolean;
    pieceWeightDiscrepancyNote: string;
    deflashOperator: string;
    deflashMachineCode: string;
    completeBoxes: number;
    partialBoxQuantity: number;
    shelfInventoryFlag: boolean;
    jobDoneFlag: boolean;
    rowID: number;
    packingDT: string;
    part: IPackingPart;
    partPackaging: IPackingPartPackaging;
    objects: IPackingObject[];
}

export interface IPackingJobListState {
    value: IPackingJob[];
    status: 'init' | 'idle' | 'loading' | 'failed';
}

const initialState: IPackingJobListState = {
    value: [],
    status: 'init',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const SetError = createAction<IApplicationErrorState>(
    'applicationError/applicationErrorOccurred',
);

export const getPackingJobsList = createAsyncThunk(
    'packingJobs/getList',
    async (dummy: {} = {}, { dispatch, getState }) => {
        const { localApiDetails, identity, partList, machineList } =
            getState() as {
                localApiDetails: ILocalApiState;
                identity: IIdentityState;
                partList: IPartListState;
                machineList: IMachineListState;
            };
        const response = await retrievePackingJobs(
            localApiDetails,
            identity.value,
            partList.value,
            machineList.value,
            dispatch,
            SetError,
        );

        return response.data;
    },
);

// A function that accepts an initial state, an object full of reducer functions,
// and a "slice name", and automatically generates action creators and action types
// that correspond to the reducers and state.
export const packageJobListSlice = createSlice({
    name: 'prototype',
    initialState,
    reducers: {
        reset: (state) => {
            state = initialState;
        },
        //todo: error checking
        //todo: notification on async tasks
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(getPackingJobsList.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(getPackingJobsList.fulfilled, (state, action) => {
                state.status = 'idle';
                state.value = action.payload;
            });
    },
});

export const {} = packageJobListSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const selectPackingJobList = (state: RootState): IPackingJob[] =>
    state.packingJobList.value;

export default packageJobListSlice.reducer;
